arrange(., desc(Date)) %>%
mutate(., day_ret = (Close - Open) / Open * 100) %>%
select(., Name, Sector, Volume, day_ret, Date) %>%
filter(., is.null(day_ret) == F) %>%
na.omit(.) %>%
filter(., Date == '2017-08-11') %>%
select(., -Date) %>%
rbind(ret_sec_stock, df_add) %>%
rename(., Parent = Sector) %>%
arrange(., Parent)
View(test3)
test4 = sector_data %>%
mutate(., day_ret = (close - open) / open * 100) %>%
select(., Name = name, Date = timestamp, Volume = volume, day_ret) %>%
filter(., is.null(day_ret) == F) %>%
mutate(., Sector = 'S&P500') %>%
filter(., Date == input$date) %>%
select(., -Date)
test4 = sector_data %>%
mutate(., day_ret = (close - open) / open * 100) %>%
select(., Name = name, Date = timestamp, Volume = volume, day_ret) %>%
filter(., is.null(day_ret) == F) %>%
mutate(., Sector = 'S&P500') %>%
filter(., Date == '2017-08-11') %>%
select(., -Date)
View(test4)
test4 = sector_data %>%
mutate(., day_ret = (close - open) / open * 100) %>%
select(., Name = name, Date = timestamp, Volume = volume, day_ret) %>%
filter(., is.null(day_ret) == F) %>%
mutate(., Sector = 'S&P500') %>%
filter(., Date == '2017-08-11') %>%
select(., Name, Parent = Sector, Volume, day_ret, -Date)
runApp('ShinyProject')
test5 = rbind(test3, test4)
View(test5)
View(test3)
test3 = stocks_w_sec %>%
arrange(., desc(Date)) %>%
mutate(., day_ret = (Close - Open) / Open * 100) %>%
select(., Name, Sector, Volume, day_ret, Date) %>%
filter(., is.null(day_ret) == F) %>%
na.omit(.) %>%
filter(., Date == '2017-08-11') %>%
select(., -Date) %>%
rbind(ret_sec_stock, df_add) %>%
rename(., Parent = Sector) %>%
arrange(., Parent)
View(test3)
View(test4)
test3 = stocks_w_sec %>%
arrange(., desc(Date)) %>%
mutate(., day_ret = (Close - Open) / Open * 100) %>%
select(., Name, Sector, Volume, day_ret, Date) %>%
filter(., is.null(day_ret) == F) %>%
na.omit(.) %>%
filter(., Date == '2017-08-11') %>%
select(., -Date) %>%
rbind(., df_add) %>%
rename(., Parent = Sector) %>%
arrange(., Parent)
View(test3)
test5 = rbind(test3, test4)
View(test5)
runApp('ShinyProject')
View(test5)
str(test3)
str(test4)
test3 = stocks_w_sec %>%
arrange(., desc(Date)) %>%
mutate(., day_ret = (Close - Open) / Open * 100) %>%
select(., Name, Sector, Volume, day_ret, Date) %>%
filter(., is.null(day_ret) == F) %>%
na.omit(.) %>%
filter(., Date == '2017-08-11') %>%
select(., -Date) %>%
rbind(., df_add) %>%
rename(., Parent = Sector) %>%
arrange(., Parent) %>%
mutate(., Parent_f = factor(parent), Name_f = factor(name))
test3 = stocks_w_sec %>%
arrange(., desc(Date)) %>%
mutate(., day_ret = (Close - Open) / Open * 100) %>%
select(., Name, Sector, Volume, day_ret, Date) %>%
filter(., is.null(day_ret) == F) %>%
na.omit(.) %>%
filter(., Date == '2017-08-11') %>%
select(., -Date) %>%
rbind(., df_add) %>%
rename(., Parent = Sector) %>%
arrange(., Parent) %>%
mutate(., Parent_f = factor(Parent), Name_f = factor(name))
test3 = stocks_w_sec %>%
arrange(., desc(Date)) %>%
mutate(., day_ret = (Close - Open) / Open * 100) %>%
select(., Name, Sector, Volume, day_ret, Date) %>%
filter(., is.null(day_ret) == F) %>%
na.omit(.) %>%
filter(., Date == '2017-08-11') %>%
select(., -Date) %>%
rbind(., df_add) %>%
rename(., Parent = Sector) %>%
arrange(., Parent) %>%
mutate(., Parent_f = factor(Parent), Name_f = factor(Name))
test3 = stocks_w_sec %>%
arrange(., desc(Date)) %>%
mutate(., day_ret = (Close - Open) / Open * 100) %>%
select(., Name, Sector, Volume, day_ret, Date) %>%
filter(., is.null(day_ret) == F) %>%
na.omit(.) %>%
filter(., Date == '2017-08-11') %>%
select(., -Date) %>%
rbind(., df_add) %>%
rename(., Parent = Sector) %>%
arrange(., Parent) %>%
mutate(., Parent_f = factor(Parent), Name_f = factor(Name)) %>%
select(., -c(Name, Parent))
test3 = stocks_w_sec %>%
arrange(., desc(Date)) %>%
mutate(., day_ret = (Close - Open) / Open * 100) %>%
select(., Name, Sector, Volume, day_ret, Date) %>%
filter(., is.null(day_ret) == F) %>%
na.omit(.) %>%
filter(., Date == '2017-08-11') %>%
select(., -Date) %>%
rbind(., df_add) %>%
rename(., Parent = Sector) %>%
arrange(., Parent) %>%
mutate(., Parent_f = factor(Parent), Name_f = factor(Name)) %>%
select(., Parent_f, Name_f, Volume, day_ret, -c(Name, Parent))
test3 = stocks_w_sec %>%
arrange(., desc(Date)) %>%
mutate(., day_ret = (Close - Open) / Open * 100) %>%
select(., Name, Sector, Volume, day_ret, Date) %>%
filter(., is.null(day_ret) == F) %>%
na.omit(.) %>%
filter(., Date == '2017-08-11') %>%
select(., -Date) %>%
rbind(., df_add) %>%
rename(., Parent = Sector) %>%
arrange(., Parent) %>%
mutate(., Parent_f = factor(Parent), Name_f = factor(Name)) %>%
select(., Name_f, Parent_f, Volume, day_ret, -c(Name, Parent))
test4 = sector_data %>%
mutate(., day_ret = (close - open) / open * 100) %>%
select(., Name = name, Date = timestamp, Volume = volume, day_ret) %>%
filter(., is.null(day_ret) == F) %>%
mutate(., Sector = 'S&P500') %>%
filter(., Date == '2017-08-11') %>%
mutate(., Parent_f = factor(Parent), Name_f = factor(Name)) %>%
select(., Name_f, Parent_f, Volume, day_ret, -c(Name, Parent))
test4 = sector_data %>%
mutate(., day_ret = (close - open) / open * 100) %>%
select(., Name = name, Date = timestamp, Volume = volume, day_ret) %>%
filter(., is.null(day_ret) == F) %>%
mutate(., Sector = 'S&P500') %>%
filter(., Date == '2017-08-11') %>%
mutate(., Parent_f = factor(Parent), Name_f = factor(Name))
test4 = sector_data %>%
mutate(., day_ret = (close - open) / open * 100) %>%
select(., Name = name, Date = timestamp, Volume = volume, day_ret) %>%
filter(., is.null(day_ret) == F) %>%
mutate(., Sector = 'S&P500') %>%
filter(., Date == '2017-08-11')
mutate(., Parent_f = factor(Sector), Name_f = factor(Name)) %>%
select(., Name_f, Parent_f, Volume, day_ret, -c(Name, Parent))
test4 = sector_data %>%
mutate(., day_ret = (close - open) / open * 100) %>%
select(., Name = name, Date = timestamp, Volume = volume, day_ret) %>%
filter(., is.null(day_ret) == F) %>%
mutate(., Sector = 'S&P500') %>%
filter(., Date == '2017-08-11') %>%
mutate(., Parent_f = factor(Sector), Name_f = factor(Name)) %>%
select(., Name_f, Parent_f, Volume, day_ret, -c(Name, Parent))
test4 = sector_data %>%
mutate(., day_ret = (close - open) / open * 100) %>%
select(., Name = name, Date = timestamp, Volume = volume, day_ret) %>%
filter(., is.null(day_ret) == F) %>%
mutate(., Sector = 'S&P500') %>%
filter(., Date == '2017-08-11') %>%
mutate(., Parent_f = factor(Sector), Name_f = factor(Name)) %>%
select(., Name_f, Parent_f, Volume, day_ret, -c(Name, Sector))
test5 = rbind(test3, test4)
runApp('ShinyProject')
# get the return of stock for the treemap
ret_stock = stocks_w_sec %>%
arrange(., desc(Date)) %>%
mutate(., day_ret = (Close - Open) / Open * 100) %>%
select(., Name, Sector, Volume, day_ret, Date) %>%
filter(., is.null(day_ret) == F) %>%
filter(., Date == '2017-08-11') %>%
na.omit(.) %>%
select(., Name, Sector, Volume, day_ret)
ret_sec = sector_data %>%
mutate(., day_ret = (close - open) / open * 100) %>%
select(., Name = name, Date = timestamp, Volume = volume, day_ret) %>%
filter(., is.null(day_ret) == F) %>%
group_by(., Name) %>%
top_n(., 1, wt = Date) %>%
mutate(., Sector = 'S&P500') %>%
select(., Name, Sector, Volume, day_ret)
ret_sec_stock = rbind.data.frame(ret_stock, ret_sec)
rownames(ret_sec_stock) = 1:nrow(ret_sec_stock)
df_add = data.frame(Name = c('S&P500'), Sector = c(NA),
Volume = c(71955600), day_ret = c(0.66))
ret_day = rbind(ret_sec_stock, df_add) %>%
rename(., Parent = Sector) %>%
arrange(., Parent)
ret_day$Name = as.factor(ret_day$Name)
ret_day$Parent = as.factor(ret_day$Parent)
View(ret_day)
str(ret_day)
str(test5)
test5 = rbind(test3, test4) %>%
arrange(., Parent_f)
test5 = rbind(test4, test3) %>%
arrange(., Parent_f)
str(ret_day)
str(test5)
test3 = stocks_w_sec %>%
arrange(., desc(Date)) %>%
mutate(., day_ret = (Close - Open) / Open * 100) %>%
select(., Name, Sector, Volume, day_ret, Date) %>%
filter(., is.null(day_ret) == F) %>%
na.omit(.) %>%
filter(., Date == '2017-08-11') %>%
select(., -Date) %>%
rbind(., df_add) %>%
rename(., Parent = Sector) %>%
arrange(., Parent) %>%
mutate(., Parent_f = factor(Parent), Name_f = factor(Name)) %>%
select(., Name_f, Parent_f, Volume, day_ret, -c(Name, Parent)) %>%
rename(., Name = Name_f, Parent = Parent_f)
test4 = sector_data %>%
mutate(., day_ret = (close - open) / open * 100) %>%
select(., Name = name, Date = timestamp, Volume = volume, day_ret) %>%
filter(., is.null(day_ret) == F) %>%
mutate(., Sector = 'S&P500') %>%
filter(., Date == '2017-08-11') %>%
mutate(., Parent_f = factor(Sector), Name_f = factor(Name)) %>%
select(., Name_f, Parent_f, Volume, day_ret, -c(Name, Sector)) %>%
rename(., Name = Name_f, Parent = Parent_f)
test5 = rbind(test4, test3) %>%
arrange(., Parent)
runApp('ShinyProject')
shiny::runApp('ShinyProject')
runApp('ShinyProject')
shiny::runApp('ShinyProject')
test1 = stocks_w_spy %>%
filter(., Name == 'MMM') %>%
select(., Date, Close) %>%
slice(., 1:200) %>%
na.omit(.) %>%
column_to_rownames(.) %>%
as.ts(.) %>%
Arima(., order = c(0, 1, 0))
View(test1)
for_test1 = forecast(test1, 50)
str(for_tes1)
for_test1 = forecast(test1, 50)
str(for_tes1)
test1 = stocks_w_spy %>%
filter(., Name == 'MMM') %>%
select(., Date, Close) %>%
slice(., 1:200) %>%
na.omit(.) %>%
column_to_rownames(.) %>%
as.ts(.) %>%
Arima(., order = c(0, 1, 0))
for_test1 = forecast(test1, 50)
str(for_tes1)
str(for_test1)
str(for_test1)[[6]]
str(for_test1[[6]])
str(for_test1[6])
str(for_test1[6][1])
str(for_test1[6]$upper)
class(for_test1[6]$upper)
for_test1[6]$upper
autoplot(for_test1)
plot(for_test1)
abline(h = 190)
for_test1 = forecast(test1, 50)[250, 80%]
for_test1 = forecast(test1, 50)[250, ]
for_test1 = forecast(test1, 50)[50, 1]
inte = for_test1[6]$upper[50,1]
abline(h = inte)
plot(for_test1)
abline(h = inte)
abline(h = inte, lty = 'dashed')
plot(for_test1)
abline(h = inte, lty = 'dashed')
plot(for_test1)
abline(h = inte, lty = 'dashed', col = 'red')
abline(h = inte, lty = 'dashed', col = 'red') + text(x = 255, y = inte, labels = inte)
plot(for_test1)
abline(h = inte, lty = 'dashed', col = 'red') + text(y = inte, labels = inte)
plot(for_test1)
abline(h = inte, lty = 'dashed', col = 'red') + text(pos = 4, labels = inte)
abline(h = inte, lty = 'dashed', col = 'red') + text(c(300, inte), pos = 4, labels = inte)
plot(for_test1)
abline(h = inte, lty = 'dashed', col = 'red') + text(locator(), pos = 4, labels = round(inte,2))
plot(for_test1)
abline(h = inte, lty = 'dashed', col = 'red') + text(locator(), pos = 4, labels = round(inte,2))
plot(for_test1)
cord = locator()
plot(for_test1)
abline(h = inte, lty = 'dashed', col = 'red') + text(cord, pos = 4, labels = round(inte,2))
plot(for_test1)
abline(h = inte, lty = 'dashed', col = 'red') + text(cord, labels = round(inte,2))
plot(for_test1)
cord = locator()
abline(h = inte, lty = 'dashed', col = 'red') + text(cord, labels = round(inte,2))
plot(for_test1)
cord = locator()
abline(h = inte, lty = 'dashed', col = 'red') + text(cord, labels = round(inte,2))
plot(for_test1)
cord = locator()
abline(h = inte, lty = 'dashed', col = 'red') + text(cord, labels = round(inte,2))
cord
plot(for_test1)
abline(h = inte, lty = 'dashed', col = 'red') + text(c(200, inte)), labels = round(inte,2))
plot(for_test1)
abline(h = inte, lty = 'dashed', col = 'red') +
text(x = 200, y = inte, labels = round(inte, 2))
plot(for_test1)
abline(h = inte, lty = 'dashed', col = 'red') +
text(x = 200, y = inte + 2, labels = round(inte, 2))
plot(for_test1)
abline(h = inte, lty = 'dashed', col = 'red') +
text(x = 200, y = inte + 1, labels = round(inte, 2))
plot(for_test1)
abline(h = inte, lty = 'dashed', col = 'red') +
text(x = 200, y = inte + 1, labels = round(inte, 2)) +
text(x = 195, y = inte + 1, labels = '80%')
plot(for_test1)
abline(h = inte, lty = 'dashed', col = 'red') +
text(x = 200, y = inte + 1, labels = round(inte, 2)) +
text(x = 190, y = inte + 1, labels = '80%:')
plot(for_test1)
abline(h = inte, lty = 'dashed', col = 'red') +
text(x = 200, y = inte + 1, labels = round(inte, 2)) +
text(x = 185, y = inte + 1, labels = '80%:')
plot(for_test1)
abline(h = inte, lty = 'dashed', col = 'red') +
text(x = 200, y = inte + 1, labels = round(inte, 2)) +
text(x = 160, y = inte + 1, labels = '80%:')
plot(for_test1)
abline(h = inte, lty = 'dashed', col = 'red') +
text(x = 200, y = inte + 1, labels = round(inte, 2)) +
text(x = 170, y = inte + 1, labels = '80%:')
plot(for_test1)
abline(h = inte, lty = 'dashed', col = 'red') +
text(x = 200, y = inte + 1, labels = round(inte, 2), cex = 0.6) +
text(x = 170, y = inte + 1, labels = '80%:', cex = 0.6)
abline(h = inte, lty = 'dashed', col = 'red') +
text(x = 200, y = inte + 1, labels = round(inte, 2), cex = 0.6) +
text(x = 170, y = inte + 1, labels = '80%:', cex = 0.6)
plot(for_test1)
abline(h = inte, lty = 'dashed', col = 'red') +
text(x = 200, y = inte + 1, labels = round(inte, 2), cex = 0.7) +
text(x = 170, y = inte + 1, labels = '80%:', cex = 0.7)
plot(for_test1)
abline(h = inte, lty = 'dashed', col = 'red') +
text(x = 200, y = inte + 1, labels = round(inte, 2), cex = 0.8) +
text(x = 170, y = inte + 1, labels = '80%:', cex = 0.8)
plot(for_test1)
abline(h = inte, lty = 'dashed', col = 'red') +
text(x = 200, y = inte + 1, labels = round(inte, 2), cex = 0.8) +
text(x = 175, y = inte + 1, labels = '80%:', cex = 0.8)
for_test1
inte = for_test1[250, 5]
inte = for_test1[50, 5]
class(for_test1)
str(for_test1)
for_test1[4]$mean[50.1]
plot(for_test1)
abline(h = inte, lty = 'dashed', col = 'red') +
text(x = 175, y = inte + 1, labels = '80%' + as.character(round(inte, 2)), cex = 0.8) +
# text(x = 175, y = inte + 1, labels = '80%:', cex = 0.8)
abline(h = inte, lty = 'dotdash', col = 'red') +
text(x = 200, y = inte + 1, labels = round(inte, 2), cex = 0.6) +
text(x = 170, y = inte + 1, labels = '80%:', cex = 0.6)
runApp('ShinyProject')
str(for_test1)
for_test1[4]
for_test1[4][50]
subset(for_test1[4], end = 250)
window(for_test1[4], end = 250)
window(for_test1[4], start = 250, end = 250)
window(for_test1[4], start = 249, end = 250)
window(for_test1[4], end = 50)
window(for_test1[4], start = 49, end = 50)
runApp('ShinyProject')
runApp('ShinyProject')
sector_data = read.csv('./data/sector_data.csv')
setwd('/Users/zheyang/Documents/R/BCR/ShinyProject')
sector_data = read.csv('./data/sector_data.csv')
View(sector_data)
runApp()
install.packages("shinythemes")
library(shinythemes)
runApp()
runApp()
runApp()
install.packages("rvest")
library(rvest)
url = 'http://www.nasdaq.com/article/stock-market-news-for-august-9-2017-cm829425'
webpage = read_html(url)
boxx = html_node(webpage, 'articleText')
View(boxx)
boxx = html_node(webpage, 'id = articleText')
boxx = html_node(webpage, '#articleText')
View(boxx)
boxx_text = html_text(boxx)
head(boxx_text)
str(boxx_text)
boxx_text
test = trimws(boxx_text)
test
test1 = sub('\"'. '', test)
test1 = sub('\"', '', test)
test1
test1 = sub('"', '', test)
test1
test1 = sub(')(', '', test)
test1 = sub('\(\)', '', test)
install.packages(tm)
install.packages(tm)
install.packages('tm')
install.packages("SnowballC")
install.packages("wordcloud")
install.packages("RColorBrewer")
library('tm')
library(SnowballC)
library(wordcloud)
docs = Corpus(VectorSource(test1))
View(docs)
inspect(docs)
test = trimws(boxx_text)
myCorpus = Corpus(VectorSource(test))
myCorpus = tm_map(myCorpus, content_transformer(tolower))
myCorpus = tm_map(myCorpus, removePunctuation)
myCorpus = tm_map(myCorpus, removeNumbers)
myCorpus = tm_map(myCorpus, removeWords,
c(stopwords("SMART"), "thou", "the", "and", "but"))
View(myCorpus)
dtm <- TermDocumentMatrix(myCorpus)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
warnings()
View(d)
boxx = html_node(webpage, '#articleText')
boxx_text = html_text(boxx)
test = trimws(boxx_text)
myCorpus = Corpus(VectorSource(test))
myCorpus = tm_map(myCorpus, content_transformer(tolower))
myCorpus = tm_map(myCorpus, removePunctuation)
myCorpus = tm_map(myCorpus, removeNumbers)
myCorpus = tm_map(myCorpus, removeWords, stopwords("english"))
dtm <- TermDocumentMatrix(myCorpus)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE,
colors=brewer.pal(8, "Dark2"))
dtm
m
v <- sort(rowSums(m),decreasing=TRUE)
v
View(d)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, colors=brewer.pal(8, "Dark2"))
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=100, colors=brewer.pal(8, "Dark2"))
warnings()
wordcloud(words = d$word, freq = d$freq, scale = c(4, 0.5),
min.freq = 1, max.words=100, colors=brewer.pal(8, "Dark2"))
wordcloud(words = d$word, freq = d$freq, scale = c(4, 0.5),
min.freq = 1, max.words=100, colors=brewer.pal(8, "Dark2"))
wordcloud(words = d$word, freq = d$freq, scale = c(4, 0.5),
min.freq = 3, max.words=100, colors=brewer.pal(8, "Dark2"))
wordcloud(words = d$word, freq = d$freq, scale = c(4, 0.5), random.order = F,
min.freq = 3, max.words=100, colors=brewer.pal(8, "Dark2"),
rot.per = 0.5)
wordcloud(words = d$word, freq = d$freq, scale = c(4, 0.5), random.order = F,
min.freq = 3, max.words=100, colors=brewer.pal(8, "Dark2"),
rot.per = 0.5)
wordcloud(words = d$word, freq = d$freq, scale = c(4, 0.5), random.order = F,
min.freq = 1, max.words=100, colors=brewer.pal(8, "Dark2"),
rot.per = 0.5)
wordcloud(words = d$word, freq = d$freq, scale = c(4, 0.5), random.order = F,
min.freq = 1, max.words=200, colors=brewer.pal(8, "Dark2"),
rot.per = 0.5)
wordcloud(words = d$word, freq = d$freq, scale = c(4, 0.5), random.order = F,
min.freq = 1, max.words=200, colors=brewer.pal(8, "Dark2"),
rot.per = 0.5)
runApp()
runApp()
runApp()
runApp()
