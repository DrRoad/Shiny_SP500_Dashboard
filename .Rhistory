fit_test = fitted(diff)
f = as.data.frame(ind = length(fit_test), val = fit_test)
f = data.frame(ind = length(fit_test), val = fit_test)
diff = auto.arima(ts_test[1:252,], seasonal = F,stepwise = F, approximation = F)
# checkresiduals(diff)
# print(diff)
fit_test = fitted(diff)
f = data.frame(ind = length(fit_test), val = fit_test)
f = data.frame(ind = length(fit_test), Close = fit_test)
geom_line(data = f,
aes(x = ind, y = Close )) +
geom_line(data = test,
aes(x = ind, y = Close),
inherit.aes = F)
ggplot(data = test, aes(x = Ind, y = CLose)) + geom_line() +
geom_line(data = f,
aes(x = ind, y = Close ),
inherit.aes = F)
Ind = 1:nrow(test)
ggplot(data = test, aes(x = Ind, y = CLose)) + geom_line() +
geom_line(data = f,
aes(x = ind, y = Close ),
inherit.aes = F)
ggplot(data = test, aes(x = Ind, y = Close)) + geom_line() +
geom_line(data = f,
aes(x = ind, y = Close ),
inherit.aes = F)
View(f)
# checkresiduals(diff)
# print(diff)
fit_test = fitted(diff)
f = data.frame(Close = fit_test)
Ind_f = 1:nrow(f)
Ind_test = 1:nrow(test)
ggplot(data = test, aes(x = Ind_test, y = Close)) + geom_line() +
geom_line(data = f,
aes(x = Ind_f, y = Close ),
inherit.aes = F)
geom_line(data = f,
aes(x = Ind_f, y = Close ),
inherit.aes = F)
plot(test)
plot(test, type = 'n')
line(test)
line(fit_test)
plot(test, type = 'n')
lines(test)
lines(fit_test)
data(Nile)
head(Nile)
head(test)
ts_test = ts(test)
head(ts_test)
ts_test = ts(test)
ts_test
fit = auto.arima(ts_test, stepwise = F, approximation = F, seasonal = F)
test = stocks_w_spy %>%
filter(., Name == 'MMM') %>%
select(., Date, Close) %>%
column_to_rownames(.)
ts_test = ts(test)
fit = auto.arima(ts_test, stepwise = F, approximation = F, seasonal = F)
plot(ts_test, type='n')
lines(ts_test)
lines(fitted(fit), col = 'red')
test = stocks_w_spy %>%
filter(., Name == 'MMM') %>%
select(., Date, Close) %>%
column_to_rownames(.)
ts_test = ts(test)
fit = auto.arima(ts_test)
plot(ts_test, type='n')
lines(ts_test)
lines(fitted(fit), col = 'red')
test = stocks_w_spy %>%
filter(., Name == 'AAPL') %>%
select(., Date, Close) %>%
column_to_rownames(.)
ts_test = ts(test)
fit = auto.arima(ts_test)
plot(ts_test, type='n')
lines(ts_test)
lines(fitted(fit), col = 'red')
print(fit)
checkresiduals(fit)
ts_test = ts(diff(test))
fit = auto.arima(ts_test)
ts_test = diff(ts(test))
fit = auto.arima(ts_test)
plot(ts_test, type='n')
lines(ts_test)
lines(fitted(fit), col = 'red')
print(fit)
checkresiduals(fit)
ts_test = ts(test)
fit = auto.arima(ts_test)
plot(ts_test, type='n')
lines(ts_test)
lines(fitted(fit), col = 'red')
test = av_api('MMM', opz = 'full')
str(test)
test$timestamp = as.character(test$timestamp)
str(test)
test$timestamp = as.date(as.character(test$timestamp))
test$timestamp = as.Date(as.character(test$timestamp))
str(test)
test2 = test %>%
select(., timestamp, close)
str(test2)
ts_test2 = ts(test2)
head(ts_test2)
test2 = test %>%
select(., timestamp, close) %>%
column_to_rownames(.)
ts_test2 = ts(test2)
head(ts_test2)
fit = auto.arima(ts_test2, seasonal = F, stepwise = F, approximation = F)
print(fit)
checkresiduals(fit)
nrow(ts_test2)
fit = auto.arima(ts_test2[1:4000], seasonal = F, stepwise = F, approximation = F)
print(fit)
checkresiduals(fit)
fut = Arima(ts_test2[4001:4546], model = fit)
accuracy(fut)
plot(ts_test2, type='n')
lines(ts_test2)
lines(fitted(fit))
plot(ts_test2, type='n')
lines(ts_test2)
lines(fitted(fit), col = 'red')
cast = forecast(fit, 546)
autoplot(cast) +
geom_line(data = ts_test2,
aes(x = 1:nrow(ts_test2), y = close),
inherit.aes = F)
autoplot(cast)
chec = checkresiduals(fit)
fit = auto.arima(ts_test2[1:200], seasonal = F, stepwise = F, approximation = F)
print(fit)
checkresiduals(fit)
fut = Arima(ts_test2[201:251], model = fit)
accuracy(fut)
plot(ts_test2[1:200], type='n')
lines(ts_test2[1:200])
lines(fitted(fit), col = 'red')
cast = forecast(fit, 50)
autoplot(cast)
autoplot(cast) +
geom_line(data = ts_test2,
aes(x = 1:250, y = close),
inherit.aes = F)
autoplot(cast) +
geom_line(data = ts_test2[1:250],
aes(x = 1:250, y = close),
inherit.aes = F)
autoplot(cast) +
geom_line(data = ts_test2[200:250],
aes(x = 200:250, y = close),
inherit.aes = F)
autoplot(cast) +
geom_line(data = ts_test2,
aes(x = 200:250, y = close),
inherit.aes = F)
ts_test2
head(ts_test2)
ts_test2 = test2
fit = auto.arima(ts_test2[1:200], seasonal = F, stepwise = F, approximation = F)
fit = auto.arima(ts_test2[1:200,], seasonal = F, stepwise = F, approximation = F)
print(fit)
checkresiduals(fit)
fut = Arima(ts_test2[201:251,], model = fit)
accuracy(fut)
plot(ts_test2[1:200,], type='n')
lines(ts_test2[1:200,])
lines(fitted(fit), col = 'red')
cast = forecast(fit, 50)
autoplot(cast) +
geom_line(data = ts_test2,
aes(x = 1:250, y = close),
inherit.aes = F)
autoplot(cast) +
geom_line(data = ts_test2[1:250,],
aes(x = 1:250, y = close),
inherit.aes = F)
str(ts_test2)
autoplot(cast) +
geom_line(data = ts_test2[1:250,],
inherit.aes = F)
shiny::runApp('ShinyProject')
View(ret_sec_stock)
View(sector_data)
stocks_w_spy %>%
filter(., Name == 'MMM') %>%
select(., Date, Open, High, Low, Close) %>%
na.omit(.) %>%
mutate(., SMA = SMA(Close, n = input$sma)) %>%
mutate(., EMA = EMA(Close, n = input$ema)) %>%
column_to_rownames(.) %>%
add_rownames(.)
test = stocks_w_spy %>%
filter(., Name == 'MMM') %>%
select(., Date, Open, High, Low, Close) %>%
na.omit(.) %>%
mutate(., SMA = SMA(Close, n = 20)) %>%
mutate(., EMA = EMA(Close, n = 30)) %>%
column_to_rownames(.) %>%
add_rownames(.)
View(test)
test = stocks_w_spy %>%
filter(., Name == 'MMM') %>%
select(., Date, Open, High, Low, Close) %>%
na.omit(.) %>%
mutate(., SMA = SMA(Close, n = 20)) %>%
mutate(., EMA = EMA(Close, n = 30)) %>%
column_to_rownames(.) %>%
add_rownames(.) %>%
select(., Date = rowname, Close)
fit = auto.arima(test, seasonal = F, stepwise = F, approximation = F)
test = stocks_w_spy %>%
filter(., Name == 'MMM') %>%
select(., Date, Open, High, Low, Close) %>%
na.omit(.) %>%
mutate(., SMA = SMA(Close, n = 20)) %>%
mutate(., EMA = EMA(Close, n = 30)) %>%
column_to_rownames(.) %>%
select(., Close)
fit = auto.arima(test, seasonal = F, stepwise = F, approximation = F)
fit = auto.arima(test[1:200,], seasonal = F, stepwise = F, approximation = F)
print(fit)
Box.test(fit, type = 'Ljung_box')
Box.test(fit, type = 'Ljung_Box')
Box.test(fit, type = 'Ljung-Box')
fit.resid = resid(fit)
plot(test[1:200, Close], fit.resid)
plot(test[1:200, test$Close], fit.resid)
plot(test[1:200, ], fit.resid)
checkresiduals(fit, plot = F)
shapiro.test(fit)
checkresiduals(fit)
fit_resid = residuals(fit)
View(fit)
View(fit)
ggplot() + geom_line(aes(x = test[1:200], y = fit_resid))
ggplot() + geom_line(aes(x = test[1:200,], y = fit_resid))
runApp('ShinyProject')
runApp('ShinyProject')
runApp('ShinyProject')
test = stocks_w_spy %>%
filter(., Name == 'MMM') %>%
select(., Date,Close) %>%
na.omit(.) %>%
column_to_rownames(.)
View(test)
diff(test, differences = 1)
diff(ts(test), differences = 1)
runApp('ShinyProject')
ts(test)[1:200]
?arima
residuals(arima(ts(test)[1:200], order = c(0,1,0)))
length(residuals(arima(ts(test)[1:200], order = c(0,1,0))))
test = stocks_w_spy %>%
filter(., Name == 'MMM') %>%
select(., Date, Close) %>%
na.omit(.) %>%
column_to_rownames(.) %>%
ts(.)[1:200] %>%
arima(., order = c(0, 1, 0))
test = stocks_w_spy %>%
filter(., Name == 'MMM') %>%
select(., Date, Close) %>%
na.omit(.) %>%
column_to_rownames(.) %>%
ts(.)[1:200, ] %>%
arima(., order = c(0, 1, 0))
test = stocks_w_spy %>%
filter(., Name == 'MMM') %>%
select(., Date, Close) %>%
na.omit(.) %>%
column_to_rownames(.) %>%
as.ts(.)[1:200] %>%
arima(., order = c(0, 1, 0))
test = stocks_w_spy %>%
filter(., Name == 'MMM') %>%
select(., Date, Close) %>%
na.omit(.) %>%
column_to_rownames(.)
test = stocks_w_spy %>%
filter(., Name == 'MMM') %>%
select(., Date, Close) %>%
na.omit(.) %>%
column_to_rownames(.) %>%
as.ts(.)
test = stocks_w_spy %>%
filter(., Name == 'MMM') %>%
select(., Date, Close)[1:200, Date, Close]%>%
na.omit(.) %>%
column_to_rownames(.) %>%
as.ts(.)
test = stocks_w_spy %>%
filter(., Name == 'MMM') %>%
select(., Date, Close) %>%
na.omit(.) %>%
column_to_rownames(.) %>%
as.ts(.)%>%
arima(., order = c(0, 1, 0))
test = stocks_w_spy %>%
filter(., Name == 'MMM') %>%
select(., Date, Close) %>%
slice(., 1:200) %>%
na.omit(.) %>%
column_to_rownames(.) %>%
as.ts(.)%>%
arima(., order = c(0, 1, 0))
ggplot() + geom_line(aes(x = 1:200, y = residuals(test)))
runApp('ShinyProject')
runApp('ShinyProject')
Box.test(residuals(test), c = 'ljun-box')
Box.test(residuals(test), type = 'ljun-box')
Box.test(residuals(test), type = 'ljung-Box')
Box.test(residuals(test), type = 'Ljung-Box')
checkresiduals(test, plot = F)
runApp('ShinyProject')
autoplot(test, h = 50)
autoplot(forecast(test, h = 50))
autoplot(forecast(auto.arima(test), h = 50))
test = stocks_w_spy %>%
filter(., Name == 'MMM') %>%
select(., Date, Close) %>%
slice(., 1:200) %>%
na.omit(.) %>%
column_to_rownames(.) %>%
as.ts(.) %>%
arima(., order = c(0, 1, 0))
forecast(test)
autoplot(forecast(test, h = 50))
test2 = stocks_w_spy %>%
filter(., Name == 'MMM') %>%
select(., Date, Close) %>%
slice(., 1:200) %>%
na.omit(.) %>%
column_to_rownames(.)
View(test2)
auto.arima(test2)
forecast(auto.arima(test2), h = 50)
autoplot(forecast(auto.arima(test2), h = 50))
forecast(test, h = 50)
autoplot(forecast(test, h = 50))
test3 = stocks_w_spy %>%
filter(., Name == 'MMM') %>%
select(., Date, Close) %>%
slice(., 1:200) %>%
na.omit(.) %>%
column_to_rownames(.)
test3 = stocks_w_spy %>%
filter(., Name == 'MMM') %>%
select(., Date, Close) %>%
na.omit(.) %>%
column_to_rownames(.)
accuracy(test, test3[200:250,])
accuracy(test, test3[200:220,])
test3 = stocks_w_spy %>%
filter(., Name == 'MMM') %>%
select(., Date, Close) %>%
na.omit(.) %>%
column_to_rownames(.) %>%
as.ts(.)
accuracy(test, subset(test3, start = 200, end = 250))
accuracy(test, test3)
test3 = stocks_w_spy %>%
filter(., Name == 'MMM') %>%
select(., Date, Close) %>%
na.omit(.) %>%
column_to_rownames(.)
accuracy(test, test3[201:250, Close])
accuracy(test, test3[201:250,])
test2 = stocks_w_spy %>%
filter(., Name == 'MMM') %>%
select(., Date, Close) %>%
slice(., 1:200) %>%
na.omit(.) %>%
column_to_rownames(.) %>%
as.ts(.)
autoplot(forecast(auto.arima(test2), h = 50))
autoplot(forecast(test, h = 50))
test2 = stocks_w_spy %>%
filter(., Name == 'MMM') %>%
select(., Date, Close) %>%
slice(., 1:200) %>%
na.omit(.) %>%
column_to_rownames(.) %>%
as.ts(.)
autoplot(forecast(auto.arima(test2), h = 50))
test = stocks_w_spy %>%
filter(., Name == 'MMM') %>%
select(., Date, Close) %>%
slice(., 1:200) %>%
na.omit(.) %>%
column_to_rownames(.) %>%
as.ts(.) %>%
arima(., order = c(0, 1, 0))
autoplot(forecast(test, h = 50))
accuracy(forecast(test, h = 50), test3[201:500,])
accuracy(forecast(test, h = 50), test3[201:50,])
accuracy(forecast(test, h = 50), test3[201:250,])
accuracy(forecast(test, h = 50), test3[200:250,])
accuracy(forecast(test, h = 50), test3)
accuracy(forecast(test, h = 50), test3[201:250,])
accuracy(forecast(test, h = 50), test3[200:251,])
accuracy(forecast(test, h = 50), test3[201:,])
accuracy(forecast(test, h = 50), test3[201:249,])
accuracy(forecast(test, h = 50), test3[150:200,])
accuracy(forecast(test, h = 50), test3[201:250,])
forecast(test, h = 50)
accuracy(forecast(test, h = 50), tail(test3, 50))
accuracy(forecast(test, h = 50), head(tail(test3, 50), 50))
accuracy(forecast(test, h = 50))
forecast(test, h = 50)
View(test)
test = stocks_w_spy %>%
filter(., Name == 'MMM') %>%
select(., Date, Close) %>%
slice(., 1:200) %>%
na.omit(.) %>%
column_to_rownames(.) %>%
as.ts(.) %>%
Arima(., order = c(0, 1, 0))
autoplot(forecast(test, h = 50))
runApp('ShinyProject')
shiny::runApp('ShinyProject')
str(accuracy(forecast(test, h = 50)))
test = stocks_w_spy %>%
filter(., Name == 'MMM') %>%
select(., Date, Close) %>%
slice(., 1:200) %>%
na.omit(.) %>%
column_to_rownames(.) %>%
as.ts(.) %>%
Arima(., order = c(0, 1, 0))
str(accuracy(forecast(test, h = 50)))
class(accuracy(forecast(test, h = 50)))
runApp('ShinyProject')
accuracy(forecast(test, h = 50))
shiny::runApp('ShinyProject')
fitted(test)
test = stocks_w_spy %>%
filter(., Name == 'MMM') %>%
select(., Date, Close) %>%
slice(., 1:200) %>%
na.omit(.) %>%
column_to_rownames(.) %>%
as.ts(.) %>%
Arima(., order = c(0, 1, 0))
fitted(test)
runApp('ShinyProject')
runApp('ShinyProject')
runApp('ShinyProject')
shiny::runApp('ShinyProject')
test = stocks_w_spy %>%
filter(., Name == 'MMM') %>%
select(., Date, Close) %>%
slice(., 1:200) %>%
na.omit(.) %>%
column_to_rownames(.) %>%
as.ts(.) %>%
Arima(., order = c(0, 1, 0))
setwd('/Users/zheyang/Documents/R/BCR/ShinyProject')
packages = c('googleVis','quantmod',
'shiny', 'ggplot2', 'dplyr', 'forecast',
'TTR', 'data.table', 'dygraphs', 'zoo',
'shinydashboard', 'DT', 'textshape','plotly','tidyr')
my.install = function(pkg, ...) {
if (!(pkg %in% installed.packages()[,1])) {
install.packages(pkg)
}
return(library(pkg, ...))
}
purrr::walk(packages, my.install, character.only = T, warn.conflicts = F)
test = stocks_w_spy %>%
filter(., Name == 'MMM') %>%
select(., Date, Close) %>%
slice(., 1:200) %>%
na.omit(.) %>%
column_to_rownames(.) %>%
as.ts(.) %>%
Arima(., order = c(0, 1, 0))
forecast(test, h = 50)
test = stocks_w_spy %>%
filter(., Name == 'MMM') %>%
select(., Date, Close) %>%
slice(., 1:200) %>%
na.omit(.) %>%
column_to_rownames(.) %>%
as.ts(.) %>%
Arima(., order = c(0, 1, 0))
runApp()
test = stocks_w_spy %>%
filter(., Name == 'MMM') %>%
select(., Date, Close) %>%
slice(., 1:200) %>%
na.omit(.) %>%
column_to_rownames(.) %>%
as.ts(.) %>%
Arima(., order = c(0, 1, 0))
forecast(test, h = 50)
runApp()
runApp()
auto = autoplot(forecast(test, h = 50))
str(suto)
str(auto)
runApp()
runApp()
